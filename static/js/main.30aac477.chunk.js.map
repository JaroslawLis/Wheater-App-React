{"version":3,"sources":["components/formAddCity.js","components/settings.js","components/settingsPage.js","components/mainTable.js","components/showCity.js","App.js","serviceWorker.js","index.js"],"names":["FormAddCity","props","react_default","a","createElement","Form","onSubmit","submit","Row","Col","Control","type","placeholder","value","onChange","change","Button","variant","Settings","react_router_dom","to","SettingsPage","Fragment","Group","as","Label","column","sm","Check","label","name","id","MainTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","_this2","data","map","city","i","concat","cityID","cityName","averageTemp","onClick","handleRemoveButton","Container","Component","ShowCity","cityLat","cityLon","Apikey","App","cities","handleInputChange","e","setState","target","units","writeCity","toConsumableArray","push","sum","length","main","temp","toFixed","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","respone","json","console","log","coord","lat","lon","list","catch","err","settings","click","handleSettingsButton","react_router","path","exact","render","formAddCity","mainTable","settingsPage","showCity","find","parseInt","match","params","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30aac477.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nconst FormAddCity = props => {\r\n  return (\r\n    <Form onSubmit={props.submit}>\r\n      <Row>\r\n        <Col>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Nazwa miasta\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Dodaj\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormAddCity;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <Link to=\"/settings\">\r\n      {\" \"}\r\n      <Button variant=\"outline-primary\">Ustawienia</Button>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nconst SettingsPage = props => {\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <Form.Group as={Row}>\r\n          <Form.Label as=\"legend\" column sm={2}>\r\n            Jednostka:\r\n          </Form.Label>\r\n          <Col sm={10}>\r\n            <Form.Check\r\n              type=\"radio\"\r\n              label=\"&deg;C\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios1\"\r\n            />\r\n            <Form.Check\r\n              type=\"radio\"\r\n              label=\"&deg;F\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios2\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n      </fieldset>\r\n      <Link to=\"/\">\r\n        <Button variant=\"outline-primary\">Powrót</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Col, Row, Container } from \"react-bootstrap\";\r\n//import \"./mainTable.css\";\r\n\r\nclass MainTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      text: props.text\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data.map((city, i) => (\r\n      <Row>\r\n        <Col>{i + 1}</Col>\r\n        <Col>\r\n          <Link to={`/showcity/${city.cityID}`}>{city.cityName}</Link>\r\n        </Col>\r\n\r\n        <Col>{city.averageTemp}</Col>\r\n\r\n        <Col>\r\n          <Button\r\n            variant=\"outline-danger\"\r\n            onClick={() => this.props.handleRemoveButton(i)}\r\n          >\r\n            Usuń\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    ));\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>#</Col>\r\n          <Col>Miasto</Col>\r\n          <Col>Średnia prognozowana temperatura</Col>\r\n          <Col />\r\n        </Row>\r\n        {data}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n//import \"./showFirm.css\";\r\nconst ShowCity = props => {\r\n  return (\r\n    <>\r\n      <h1>{props.city.cityName}</h1>\r\n      <h3>szerokość geograficzna: {props.city.cityLat}</h3>\r\n      <h3>długość geograficzna: {props.city.cityLon}</h3>\r\n      <Link to=\"/\">\r\n        <Button variant=\"outline-primary\">Powrót</Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowCity;\r\n\r\n// class ShowCity extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = this.props.state.firmList[this.props.match.params.id];\r\n//     }\r\n\r\n//     render() {\r\n//         console.log(this.state);\r\n//         return (\r\n//             <div data-aos=\"zoom-in\" className=\"showFirmInformation\">\r\n//                 <div>Nazwa Firmy</div>\r\n//                 <div>{this.state.firm}</div>\r\n//                 <div>Adres</div>\r\n//                 <div>{this.state.address}</div>\r\n//                 <div>Strona www</div>\r\n//                 <div>{this.state.www}</div>\r\n//                 <div>Telefon</div>\r\n//                 <div>{this.state.phone}</div>\r\n//                 <div>e-mail</div>\r\n//                 <div>{this.state.email}</div>\r\n//                 <div>link do ogłoszenia o pracę</div>\r\n//                 <div>{this.state.jobAdvertisementLink}</div>\r\n//                 <div>Ogłoszenie o pracę (treść)</div>\r\n//                 <div>\r\n//                     <pre>{this.state.jobAdvertisement}</pre>\r\n//                 </div>\r\n//                 <div>Data zapytania</div>\r\n//                 <div>{this.state.queryDate ? this.state.queryDate : \"brak danych\"}</div>\r\n//                 <div>Data wysłania CV</div>\r\n//                 <div>{this.state.CVDate ? this.state.CVDate : \"brak danych\"}</div>\r\n//                 <div>Data odpowiedzi</div>\r\n//                 <div>\r\n//                     {this.state.replayDate ? this.state.replayDate : \"brak danych\"}\r\n//                 </div>\r\n//                 <div>Data rozmowy o pracę</div>\r\n//                 <div>\r\n//                     {this.state.interviewDate ? this.state.interviewDate : \"brak danych\"}\r\n//                 </div>\r\n//                 <div>Notatki (treść)</div>\r\n//                 <div>\r\n//                     <pre>{this.state.notices}</pre>\r\n//                 </div>\r\n//                 <div>Notatki dotyczące rekrutacji (treść)</div>\r\n//                 <div>\r\n//                     <pre>{this.state.recrutationNotices}</pre>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default ShowCity;\r\n","import React, { Component } from \"react\";\n\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\nimport FormAddCity from \"./components/formAddCity\";\nimport Settings from \"./components/settings\";\nimport SettingsPage from \"./components/settingsPage\";\nimport MainTable from \"./components/mainTable\";\nimport ShowCity from \"./components/showCity\";\n\nconst Apikey = `36d3d56a52da5b9081da981e4b9a0dc3`;\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    cities: []\n    //citiesList: JSON.parse(localStorage.getItem(\"savedCities\")) || []\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value,\n      units: \"metric\"\n    });\n  };\n\n  writeCity = city => {\n    let cities = [...this.state.cities];\n    cities.push(city);\n    this.setState({\n      cities,\n      value: \"\"\n    });\n  };\n\n  averageTemp = data => {\n    let sum = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      sum += data[i].main.temp;\n    }\n    return (sum / i).toFixed(1);\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/forecast?q=${\n      this.state.value\n    }&units=${this.state.units}&appid=${Apikey}`;\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Nie udało się\");\n      })\n      .then(respone => respone.json())\n      .then(data => {\n        console.log(data);\n        const city = {\n          cityID: data.city.id,\n          cityName: data.city.name,\n          cityLat: data.city.coord.lat,\n          cityLon: data.city.coord.lon,\n          averageTemp: this.averageTemp(data.list)\n        };\n\n        console.log(city);\n        this.writeCity(city);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleRemoveButton = () => {};\n\n  render() {\n    return (\n      <Container>\n        <Router>\n          <Settings click={this.handleSettingsButton} />\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() => (\n                <>\n                  <FormAddCity\n                    value={this.state.value}\n                    change={this.handleInputChange}\n                    submit={this.handleCitySubmit}\n                  />\n                  <MainTable\n                    data={this.state.cities}\n                    handleRemoveButton={this.handleRemoveButton}\n                  />\n                </>\n              )}\n            />\n            <Route path=\"/settings\" exact render={() => <SettingsPage />} />\n            <Route\n              path=\"/showcity/:id\"\n              exact\n              render={props => (\n                <ShowCity\n                  city={this.state.cities.find(\n                    city => city.cityID === parseInt(props.match.params.id)\n                  )}\n                />\n              )}\n            />\n          </Switch>\n        </Router>\n      </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}