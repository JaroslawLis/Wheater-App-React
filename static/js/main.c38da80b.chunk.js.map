{"version":3,"sources":["components/formAddCity.js","components/settings.js","components/settingsPage.js","components/mainTable.js","components/showCity.js","App.js","serviceWorker.js","index.js"],"names":["FormAddCity","props","react_default","a","createElement","Form","onSubmit","submit","Row","Col","xs","Control","type","placeholder","value","onChange","change","Button","variant","block","className","Settings","md","span","offset","react_router_dom","to","SettingsPage","Fragment","Group","as","Label","column","sm","Check","label","name","id","checked","units","handleFormSettings","MainTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","data","map","city","i","key","cityID","concat","cityName","averageTemp","onClick","handleRemoveButton","Component","ShowCity","cityLat","cityLon","Apikey","citiesList","JSON","parse","localStorage","getItem","App","cities","handleInputChange","e","setState","target","writeCity","toConsumableArray","push","sum","length","main","temp","toFixed","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","respone","json","findIndex","console","log","coord","lat","lon","list","setItem","stringify","catch","err","index","removedCityID","splice","removedCityIndex","getWheater","Promise","all","res","Container","settings","click","handleSettingsButton","react_router","path","exact","render","formAddCity","mainTable","settingsPage","showCity","find","parseInt","match","params","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c38da80b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nconst FormAddCity = props => {\r\n  return (\r\n    <Form onSubmit={props.submit}>\r\n      <Row>\r\n        <Col xs={9}>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Nazwa miasta\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n          />{\" \"}\r\n        </Col>{\" \"}\r\n        <Col>\r\n          <Button variant=\"primary\" type=\"submit\" block>\r\n            <i className=\"fa fa-search-plus\" /> {\"     \"}\r\n            Dodaj{\" \"}\r\n          </Button>{\" \"}\r\n        </Col>{\" \"}\r\n      </Row>{\" \"}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormAddCity;\r\n","import React from \"react\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <Row className=\"settings\">\r\n      <Col\r\n        md={{\r\n          span: 3,\r\n          offset: 10\r\n        }}\r\n      >\r\n        <Link to=\"/settings\">\r\n          <Button variant=\"outline-primary\"> Ustawienia </Button>{\" \"}\r\n        </Link>{\" \"}\r\n      </Col>{\" \"}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nconst SettingsPage = props => {\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <Form.Group as={Row}>\r\n          <Form.Label as=\"legend\" column sm={2}>\r\n            Jednostka:\r\n          </Form.Label>{\" \"}\r\n          <Col sm={10}>\r\n            <Form.Check\r\n              type=\"radio\"\r\n              label=\"&deg;C\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios1\"\r\n              value=\"metric\"\r\n              checked={props.units === \"metric\" ? true : false}\r\n              onChange={props.handleFormSettings}\r\n            />\r\n            <Form.Check\r\n              type=\"radio\"\r\n              label=\"&deg;F\"\r\n              name=\"formHorizontalRadios\"\r\n              id=\"formHorizontalRadios2\"\r\n              value=\"imperial\"\r\n              checked={props.units === \"imperial\" ? true : false}\r\n              onChange={props.handleFormSettings}\r\n            />\r\n          </Col>{\" \"}\r\n        </Form.Group>{\" \"}\r\n      </fieldset>{\" \"}\r\n      <Link to=\"/\">\r\n        <Button variant=\"outline-primary\"> Powrót </Button>{\" \"}\r\n      </Link>{\" \"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsPage;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\n//import \"./mainTable.css\";\r\n\r\nclass MainTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const data = this.props.data.map((city, i) => (\r\n      <Row className=\"displayCity\" key={city.cityID}>\r\n        <Col xs={1}> {i + 1} </Col>{\" \"}\r\n        <Col xs={6}>\r\n          <Link to={`/showcity/${city.cityID}`}> {city.cityName} </Link>{\" \"}\r\n        </Col>{\" \"}\r\n        <Col>\r\n          {\" \"}\r\n          {city.averageTemp} &deg; {this.props.units === \"metric\" ? \"C\" : \"F\"}{\" \"}\r\n        </Col>{\" \"}\r\n        <Col className=\"button\">\r\n          <Button\r\n            variant=\"outline-danger\"\r\n            block\r\n            onClick={() => this.props.handleRemoveButton(i)}\r\n          >\r\n            <i className=\"fa fa-minus-circle\" /> Usuń{\" \"}\r\n          </Button>{\" \"}\r\n        </Col>{\" \"}\r\n      </Row>\r\n    ));\r\n    return (\r\n      <>\r\n        <Row className=\"title\">\r\n          <Col xs={1}> # </Col> <Col xs={6}> Miasto </Col>{\" \"}\r\n          <Col> Średnia prognozowana temperatura </Col> <Col />\r\n        </Row>{\" \"}\r\n        {data}{\" \"}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainTable;\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n//import \"./showFirm.css\";\r\nconst ShowCity = props => {\r\n  return (\r\n    <>\r\n      <h1> {props.city.cityName} </h1>{\" \"}\r\n      <h3> szerokość geograficzna: {props.city.cityLat} </h3>{\" \"}\r\n      <h3> długość geograficzna: {props.city.cityLon} </h3>{\" \"}\r\n      <Link to=\"/\">\r\n        <Button variant=\"outline-primary\"> Powrót </Button>{\" \"}\r\n      </Link>{\" \"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowCity;\r\n","import React, { Component } from \"react\";\n\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n//Redirect,\nimport { Container } from \"react-bootstrap\";\nimport FormAddCity from \"./components/formAddCity\";\nimport Settings from \"./components/settings\";\nimport SettingsPage from \"./components/settingsPage\";\nimport MainTable from \"./components/mainTable\";\nimport ShowCity from \"./components/showCity\";\n\nconst Apikey = `36d3d56a52da5b9081da981e4b9a0dc3`;\n\nconst citiesList = JSON.parse(localStorage.getItem(\"savedCities\")) || [];\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    cities: [],\n    units: \"metric\"\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  writeCity = city => {\n    let cities = [...this.state.cities];\n    cities.push(city);\n    this.setState({\n      cities,\n      value: \"\"\n    });\n  };\n\n  averageTemp = data => {\n    let sum = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      sum += data[i].main.temp;\n    }\n    return (sum / i).toFixed(1);\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/forecast?q=${\n      this.state.value\n    }&units=${this.state.units}&appid=${Apikey}`;\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"Nie udało się\");\n      })\n      .then(respone => respone.json())\n      .then(data => {\n        let x = citiesList.findIndex(city => city === data.city.id);\n        if (x >= 0) {\n          console.log(\"miasto istnieje\");\n          return;\n        }\n\n        const city = {\n          cityID: data.city.id,\n          cityName: data.city.name,\n          cityLat: data.city.coord.lat,\n          cityLon: data.city.coord.lon,\n          averageTemp: this.averageTemp(data.list)\n        };\n        citiesList.push(data.city.id);\n\n        localStorage.setItem(\"savedCities\", JSON.stringify(citiesList));\n        this.writeCity(city);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  handleRemoveButton = index => {\n    let removedCityID = citiesList[index];\n    citiesList.splice(index, 1);\n\n    localStorage.setItem(\"savedCities\", JSON.stringify(citiesList));\n    let cities = [...this.state.cities];\n\n    let removedCityIndex = cities.findIndex(\n      city => city.cityID === removedCityID\n    );\n    cities.splice(removedCityIndex, 1);\n    this.setState({\n      cities\n    });\n  };\n  getWheater = units => {\n    let cities = [];\n    Promise.all(\n      citiesList.map((city, index) =>\n        fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?id=${city}&units=${units}&appid=${Apikey}`\n        )\n          .then(res => res.json())\n          .then(data => {\n            const city = {\n              cityID: data.city.id,\n              cityName: data.city.name,\n              cityLat: data.city.coord.lat,\n              cityLon: data.city.coord.lon,\n              averageTemp: this.averageTemp(data.list)\n            };\n            cities.push(city);\n\n            if (!city) {\n              return \"error\";\n            }\n          })\n      )\n    )\n      .then(data =>\n        this.setState({\n          cities\n        })\n      )\n      .catch(err => {\n        throw err;\n      });\n  };\n\n  handleFormSettings = e => {\n    if (e.target.value === \"imperial\") {\n      this.setState({\n        units: \"imperial\"\n      });\n      this.getWheater(\"imperial\");\n    } else if (e.target.value === \"metric\") {\n      this.setState({\n        units: \"metric\"\n      });\n      this.getWheater(\"metric\");\n    }\n  };\n  componentDidMount() {\n    this.getWheater(this.state.units);\n  }\n  render() {\n    return (\n      <Container className=\"App\">\n        <Router>\n          <Settings click={this.handleSettingsButton} />{\" \"}\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={() => (\n                <>\n                  <FormAddCity\n                    value={this.state.value}\n                    change={this.handleInputChange}\n                    submit={this.handleCitySubmit}\n                  />{\" \"}\n                  <MainTable\n                    data={this.state.cities}\n                    units={this.state.units}\n                    handleRemoveButton={this.handleRemoveButton}\n                  />{\" \"}\n                </>\n              )}\n            />{\" \"}\n            <Route\n              path=\"/settings\"\n              exact\n              render={props => (\n                <SettingsPage\n                  units={this.state.units}\n                  handleFormSettings={this.handleFormSettings}\n                />\n              )}\n            />{\" \"}\n            <Route\n              path=\"/showcity/:id\"\n              exact\n              render={props => (\n                <ShowCity\n                  city={this.state.cities.find(\n                    city => city.cityID === parseInt(props.match.params.id)\n                  )}\n                />\n              )}\n            />{\" \"}\n            <Route\n              path=\"/\"\n              render={() => (\n                <>\n                  <FormAddCity\n                    value={this.state.value}\n                    change={this.handleInputChange}\n                    submit={this.handleCitySubmit}\n                  />{\" \"}\n                  <MainTable\n                    data={this.state.cities}\n                    handleRemoveButton={this.handleRemoveButton}\n                  />{\" \"}\n                </>\n              )}\n            />{\" \"}\n          </Switch>{\" \"}\n        </Router>{\" \"}\n      </Container>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}